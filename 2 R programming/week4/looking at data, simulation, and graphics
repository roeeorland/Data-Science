
R version 3.3.2 (2016-10-31) -- "Sincere Pumpkin Patch"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: i386-w64-mingw32/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(swirl)

| Hi! I see that you have some variables saved in your workspace. To keep
| things running smoothly, I recommend you clean up before starting swirl.

| Type ls() to see a list of the variables in your workspace. Then, type
| rm(list=ls()) to clear your workspace.

| Type swirl() when you are ready to begin.

> rm(list=ls())
> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the same
| name as you did then. If you are new, call yourself something unique.

What shall I call you? roeeorland

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 12

  |                                                                              |                                                                      |   0%

| Whenever you're working with a new dataset, the first thing you should do is
| look at it! What is the format of the data? What are the dimensions? What are
| the variable names? How are the variables stored? Are there missing data? Are
| there any flaws in the data?

...

  |                                                                              |===                                                                   |   4%
| This lesson will teach you how to answer these questions and more using R's built-in functions. We'll be using a dataset constructed from the United States
| Department of Agriculture's PLANTS Database (http://plants.usda.gov/adv_search.html).



| Leaving swirl now. Type swirl() to resume.

...> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the same name as you did then. If you are new, call yourself something unique.

What shall I call you? roeeorland

| Would you like to continue with one of these lessons?

1: R Programming Looking at Data
2: No. Let me start something new.

Selection: 1



| This lesson will teach you how to answer these questions and more using R's built-in functions. We'll be using a dataset constructed from the United States
| Department of Agriculture's PLANTS Database (http://plants.usda.gov/adv_search.html).

...

  |                                                                              |======                                                                |   8%
| I've stored the data for you in a variable called plants. Type ls() to list the variables in your workspace, among which should be plants.

> ls()
[1] "plants"

| You got it!

  |                                                                              |========                                                              |  12%
| Let's begin by checking the class of the plants variable with class(plants). This will give us a clue as to the overall structure of the data.

> class(plants)
[1] "data.frame"

| Excellent work!

  |                                                                              |===========                                                           |  16%
| It's very common for data to be stored in a data frame. It is the default class for data read into R using functions like read.csv() and read.table(), which you'll
| learn about in another lesson.

...

  |                                                                              |==============                                                        |  20%
| Since the dataset is stored in a data frame, we know it is rectangular. In other words, it has two dimensions (rows and columns) and fits neatly into a table or
| spreadsheet. Use dim(plants) to see exactly how many rows and columns we're dealing with.

> dim(plants)
[1] 5166   10

| Perseverance, that's the answer.

  |                                                                              |=================                                                     |  24%
| The first number you see (5166) is the number of rows (observations) and the second number (10) is the number of columns (variables).

...

  |                                                                              |====================                                                  |  28%
| You can also use nrow(plants) to see only the number of rows. Try it out.

> nrows(plants)
Error: could not find function "nrows"
> nrow(plants)
[1] 5166

| Nice work!

  |                                                                              |======================                                                |  32%
| ... And ncol(plants) to see only the number of columns.

> ncol(plants)
[1] 10

| You are really on a roll!

  |                                                                              |=========================                                             |  36%
| If you are curious as to how much space the dataset is occupying in memory, you can use object.size(plants).

> object.size(plants)
538888 bytes

| Nice work!

  |                                                                              |============================                                          |  40%
| Now that we have a sense of the shape and size of the dataset, let's get a feel for what's inside. names(plants) will return a character vector of column (i.e.
| variable) names. Give it a shot.

> names(plants)
 [1] "Scientific_Name"      "Duration"             "Active_Growth_Period" "Foliage_Color"        "pH_Min"               "pH_Max"               "Precip_Min"          
 [8] "Precip_Max"           "Shade_Tolerance"      "Temp_Min_F"          

| You got it right!

  |                                                                              |===============================                                       |  44%
| We've applied fairly descriptive variable names to this dataset, but that won't always be the case. A logical next step is to peek at the actual data. However, our
| dataset contains over 5000 observations (rows), so it's impractical to view the whole thing all at once.

...

  |                                                                              |==================================                                    |  48%
| The head() function allows you to preview the top of the dataset. Give it a try with only one argument.

> head(plants)
               Scientific_Name          Duration Active_Growth_Period Foliage_Color pH_Min pH_Max Precip_Min Precip_Max Shade_Tolerance Temp_Min_F
1                  Abelmoschus              <NA>                 <NA>          <NA>     NA     NA         NA         NA            <NA>         NA
2       Abelmoschus esculentus Annual, Perennial                 <NA>          <NA>     NA     NA         NA         NA            <NA>         NA
3                        Abies              <NA>                 <NA>          <NA>     NA     NA         NA         NA            <NA>         NA
4               Abies balsamea         Perennial    Spring and Summer         Green      4      6         13         60        Tolerant        -43
5 Abies balsamea var. balsamea         Perennial                 <NA>          <NA>     NA     NA         NA         NA            <NA>         NA
6                     Abutilon              <NA>                 <NA>          <NA>     NA     NA         NA         NA            <NA>         NA

| Nice work!

  |                                                                              |====================================                                  |  52%
| Take a minute to look through and understand the output above. Each row is labeled with the observation number and each column with the variable name. Your screen
| is probably not wide enough to view all 10 columns side-by-side, in which case R displays as many columns as it can on each line before continuing on the next.

...

  |                                                                              |=======================================                               |  56%
| By default, head() shows you the first six rows of the data. You can alter this behavior by passing as a second argument the number of rows you'd like to view. Use
| head() to preview the first 10 rows of plants.

> head(plants,10)
                     Scientific_Name          Duration Active_Growth_Period Foliage_Color pH_Min pH_Max Precip_Min Precip_Max Shade_Tolerance Temp_Min_F
1                        Abelmoschus              <NA>                 <NA>          <NA>     NA     NA         NA         NA            <NA>         NA
2             Abelmoschus esculentus Annual, Perennial                 <NA>          <NA>     NA     NA         NA         NA            <NA>         NA
3                              Abies              <NA>                 <NA>          <NA>     NA     NA         NA         NA            <NA>         NA
4                     Abies balsamea         Perennial    Spring and Summer         Green      4    6.0         13         60        Tolerant        -43
5       Abies balsamea var. balsamea         Perennial                 <NA>          <NA>     NA     NA         NA         NA            <NA>         NA
6                           Abutilon              <NA>                 <NA>          <NA>     NA     NA         NA         NA            <NA>         NA
7               Abutilon theophrasti            Annual                 <NA>          <NA>     NA     NA         NA         NA            <NA>         NA
8                             Acacia              <NA>                 <NA>          <NA>     NA     NA         NA         NA            <NA>         NA
9                  Acacia constricta         Perennial    Spring and Summer         Green      7    8.5          4         20      Intolerant        -13
10 Acacia constricta var. constricta         Perennial                 <NA>          <NA>     NA     NA         NA         NA            <NA>         NA

| Your dedication is inspiring!

  |                                                                              |==========================================                            |  60%
| The same applies for using tail() to preview the end of the dataset. Use tail() to view the last 15 rows.


> head(plants,10)> tail(plants,15)
                      Scientific_Name  Duration Active_Growth_Period Foliage_Color pH_Min pH_Max Precip_Min Precip_Max Shade_Tolerance Temp_Min_F
5152                          Zizania      <NA>                 <NA>          <NA>     NA     NA         NA         NA            <NA>         NA
5153                 Zizania aquatica    Annual               Spring         Green    6.4    7.4         30         50      Intolerant         32
5154   Zizania aquatica var. aquatica    Annual                 <NA>          <NA>     NA     NA         NA         NA            <NA>         NA
5155                Zizania palustris    Annual                 <NA>          <NA>     NA     NA         NA         NA            <NA>         NA
5156 Zizania palustris var. palustris    Annual                 <NA>          <NA>     NA     NA         NA         NA            <NA>         NA
5157                      Zizaniopsis      <NA>                 <NA>          <NA>     NA     NA         NA         NA            <NA>         NA
5158             Zizaniopsis miliacea Perennial    Spring and Summer         Green    4.3    9.0         35         70      Intolerant         12
5159                            Zizia      <NA>                 <NA>          <NA>     NA     NA         NA         NA            <NA>         NA
5160                     Zizia aptera Perennial                 <NA>          <NA>     NA     NA         NA         NA            <NA>         NA
5161                      Zizia aurea Perennial                 <NA>          <NA>     NA     NA         NA         NA            <NA>         NA
5162                 Zizia trifoliata Perennial                 <NA>          <NA>     NA     NA         NA         NA            <NA>         NA
5163                          Zostera      <NA>                 <NA>          <NA>     NA     NA         NA         NA            <NA>         NA
5164                   Zostera marina Perennial                 <NA>          <NA>     NA     NA         NA         NA            <NA>         NA
5165                           Zoysia      <NA>                 <NA>          <NA>     NA     NA         NA         NA            <NA>         NA
5166                  Zoysia japonica Perennial                 <NA>          <NA>     NA     NA         NA         NA            <NA>         NA

| You got it right!

  |                                                                              |=============================================                         |  64%
| After previewing the top and bottom of the data, you probably noticed lots of NAs, which are R's placeholders for missing values. Use summary(plants) to get a
| better feel for how each variable is distributed and how much of the dataset is missing.

> summary(plants)
                     Scientific_Name              Duration              Active_Growth_Period      Foliage_Color      pH_Min          pH_Max         Precip_Min   
 Abelmoschus                 :   1   Perennial        :3031   Spring and Summer   : 447      Dark Green  :  82   Min.   :3.000   Min.   : 5.100   Min.   : 4.00  
 Abelmoschus esculentus      :   1   Annual           : 682   Spring              : 144      Gray-Green  :  25   1st Qu.:4.500   1st Qu.: 7.000   1st Qu.:16.75  
 Abies                       :   1   Annual, Perennial: 179   Spring, Summer, Fall:  95      Green       : 692   Median :5.000   Median : 7.300   Median :28.00  
 Abies balsamea              :   1   Annual, Biennial :  95   Summer              :  92      Red         :   4   Mean   :4.997   Mean   : 7.344   Mean   :25.57  
 Abies balsamea var. balsamea:   1   Biennial         :  57   Summer and Fall     :  24      White-Gray  :   9   3rd Qu.:5.500   3rd Qu.: 7.800   3rd Qu.:32.00  
 Abutilon                    :   1   (Other)          :  92   (Other)             :  30      Yellow-Green:  20   Max.   :7.000   Max.   :10.000   Max.   :60.00  
 (Other)                     :5160   NA's             :1030   NA's                :4334      NA's        :4334   NA's   :4327    NA's   :4327     NA's   :4338   
   Precip_Max         Shade_Tolerance   Temp_Min_F    
 Min.   : 16.00   Intermediate: 242   Min.   :-79.00  
 1st Qu.: 55.00   Intolerant  : 349   1st Qu.:-38.00  
 Median : 60.00   Tolerant    : 246   Median :-33.00  
 Mean   : 58.73   NA's        :4329   Mean   :-22.53  
 3rd Qu.: 60.00                       3rd Qu.:-18.00  
 Max.   :200.00                       Max.   : 52.00  
 NA's   :4338                         NA's   :4328    

| You're the best!

  |                                                                              |================================================                      |  68%
| summary() provides different output for each variable, depending on its class. For numeric data such as Precip_Min, summary() displays the minimum, 1st quartile,
| median, mean, 3rd quartile, and maximum. These values help us understand how the data are distributed.

...

  |                                                                              |==================================================                    |  72%
| For categorical variables (called 'factor' variables in R), summary() displays the number of times each value (or 'level') occurs in the data. For example, each
| value of Scientific_Name only appears once, since it is unique to a specific plant. In contrast, the summary for Duration (also a factor variable) tells us that our
| dataset contains 3031 Perennial plants, 682 Annual plants, etc.

...

  |                                                                              |=====================================================                 |  76%
| You can see that R truncated the summary for Active_Growth_Period by including a catch-all category called 'Other'. Since it is a categorical/factor variable, we
| can see how many times each value actually occurs in the data with table(plants$Active_Growth_Period).

> table(plants$Active_Growth_Period)

Fall, Winter and Spring                  Spring         Spring and Fall       Spring and Summer    Spring, Summer, Fall                  Summer 
                     15                     144                      10                     447                      95                      92 
        Summer and Fall              Year Round 
                     24                       5 

| You're the best!

  |                                                                              |========================================================              |  80%
| Each of the functions we've introduced so far has its place in helping you to better understand the structure of your data. However, we've left the best for
| last....

...

  |                                                                              |===========================================================           |  84%
| Perhaps the most useful and concise function for understanding the *str*ucture of your data is str(). Give it a try now.

> str(plants)
'data.frame':   5166 obs. of  10 variables:
 $ Scientific_Name     : Factor w/ 5166 levels "Abelmoschus",..: 1 2 3 4 5 6 7 8 9 10 ...
 $ Duration            : Factor w/ 8 levels "Annual","Annual, Biennial",..: NA 4 NA 7 7 NA 1 NA 7 7 ...
 $ Active_Growth_Period: Factor w/ 8 levels "Fall, Winter and Spring",..: NA NA NA 4 NA NA NA NA 4 NA ...
 $ Foliage_Color       : Factor w/ 6 levels "Dark Green","Gray-Green",..: NA NA NA 3 NA NA NA NA 3 NA ...
 $ pH_Min              : num  NA NA NA 4 NA NA NA NA 7 NA ...
 $ pH_Max              : num  NA NA NA 6 NA NA NA NA 8.5 NA ...
 $ Precip_Min          : int  NA NA NA 13 NA NA NA NA 4 NA ...
 $ Precip_Max          : int  NA NA NA 60 NA NA NA NA 20 NA ...
 $ Shade_Tolerance     : Factor w/ 3 levels "Intermediate",..: NA NA NA 3 NA NA NA NA 2 NA ...
 $ Temp_Min_F          : int  NA NA NA -43 NA NA NA NA -13 NA ...

| You nailed it! Good job!

  |                                                                              |==============================================================        |  88%
| The beauty of str() is that it combines many of the features of the other functions you've already seen, all in a concise and readable format. At the very top, it
| tells us that the class of plants is 'data.frame' and that it has 5166 observations and 10 variables. It then gives us the name and class of each variable, as well
| as a preview of its contents.

...

  |                                                                              |================================================================      |  92%
| str() is actually a very general function that you can use on most objects in R. Any time you want to understand the structure of something (a dataset, function,
| etc.), str() is a good place to start.

...

  |                                                                              |===================================================================   |  96%
| In this lesson, you learned how to get a feel for the structure and contents of a new dataset using a collection of simple and useful functions. Taking the time to
| do this upfront can save you time and frustration later on in your analysis.

...

  |                                                                              |======================================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: No
2: Yes

Selection: 2
What is your email address? roee.orland@gmail.com
What is your assignment token? CrQTVdHHKXhH57Z8
Grade submission succeeded!

| You are really on a roll!

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 
Enter an item from the menu, or 0 to exit
Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files        3: Sequences of Numbers       4: Vectors                    5: Missing Values          
 6: Subsetting Vectors         7: Matrices and Data Frames   8: Logic                      9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data           13: Simulation                14: Dates and Times           15: Base Graphics           


Selection: 13

  |                                                                                                                                                                     |                                                                                                                                                             |   0%

| One of the great advantages of using a statistical programming language like R is its vast collection of tools for simulating random numbers.

...

  |                                                                                                                                                                     |=====                                                                                                                                                        |   3%
| This lesson assumes familiarity with a few common probability distributions, but these topics will only be discussed with respect to random number generation. Even
| if you have no prior experience with these concepts, you should be able to complete the lesson and understand the main ideas.

...

  |                                                                                                                                                                     |==========                                                                                                                                                   |   6%
| The first function we'll use to generate random numbers is sample(). Use ?sample to pull up the documentation.

> ?sample
starting httpd help server ... done

| Perseverance, that's the answer.

  |                                                                                                                                                                     |==============                                                                                                                                               |   9%
| Let's simulate rolling four six-sided dice: sample(1:6, 4, replace = TRUE).

> sample(1:6,4,replace=T)
[1] 4 4 5 2

| Not exactly. Give it another go. Or, type info() for more options.

| Type sample(1:6, 4, replace = TRUE) to simulate rolling four six-sided dice.

> sample(1:6,4,replace=TRUE)
[1] 3 3 5 5

| You are really on a roll!

  |                                                                                                                                                                     |===================                                                                                                                                          |  12%
| Now repeat the command to see how your result differs. (The probability of rolling the exact same result is (1/6)^4 = 0.00077, which is pretty small!)

> sample(1:6,4,replace=TRUE)
[1] 5 6 2 6

| All that practice is paying off!

  |                                                                                                                                                                     |========================                                                                                                                                     |  15%
| sample(1:6, 4, replace = TRUE) instructs R to randomly select four numbers between 1 and 6, WITH replacement. Sampling with replacement simply means that each
| number is "replaced" after it is selected, so that the same number can show up more than once. This is what we want here, since what you roll on one die shouldn't
| affect what you roll on any of the others.

...

  |                                                                                                                                                                     |=============================                                                                                                                                |  18%
| Now sample 10 numbers between 1 and 20, WITHOUT replacement. To sample without replacement, simply leave off the 'replace' argument.

> sample(1:20,10,replace=F)
 [1]  4  6 19 13 12 11 15 14  8 16

| One more time. You can do it! Or, type info() for more options.

| Type sample(1:20, 10) to sample 10 numbers between 1 and 20, without replacement.

> sample(1:20,10,replace=FALSE)
 [1]  4  6 15 18 13 17  8 19 16  2

| Try again. Getting it right on the first try is boring anyway! Or, type info() for more options.

| Type sample(1:20, 10) to sample 10 numbers between 1 and 20, without replacement.

> sample(1:20,10)
 [1] 16 15  5 10  3 12 20 19  2 11

| You are amazing!

  |                                                                                                                                                                     |=================================                                                                                                                            |  21%
| Since the last command sampled without replacement, no number appears more than once in the output.

...

  |                                                                                                                                                                     |======================================                                                                                                                       |  24%
| LETTERS is a predefined variable in R containing a vector of all 26 letters of the English alphabet. Take a look at it now.

> letters
 [1] "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"

| Not quite right, but keep trying. Or, type info() for more options.

| Type LETTERS to print its contents to the console.

> LETTERS
 [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"

| Nice work!

  |                                                                                                                                                                     |===========================================                                                                                                                  |  27%
| The sample() function can also be used to permute, or rearrange, the elements of a vector. For example, try sample(LETTERS) to permute all 26 letters of the English
| alphabet.

> sample(LETTERS)
 [1] "J" "U" "Q" "A" "B" "L" "N" "Z" "O" "S" "D" "H" "I" "E" "W" "R" "G" "V" "K" "P" "T" "C" "X" "Y" "F" "M"

| That's a job well done!

  |                                                                                                                                                                     |================================================                                                                                                             |  30%
| This is identical to taking a sample of size 26 from LETTERS, without replacement. When the 'size' argument to sample() is not specified, R takes a sample equal in
| size to the vector from which you are sampling.

...

  |                                                                                                                                                                     |====================================================                                                                                                         |  33%
| Now, suppose we want to simulate 100 flips of an unfair two-sided coin. This particular coin has a 0.3 probability of landing 'tails' and a 0.7 probability of
| landing 'heads'.

...

  |                                                                                                                                                                     |=========================================================                                                                                                    |  36%
| Let the value 0 represent tails and the value 1 represent heads. Use sample() to draw a sample of size 100 from the vector c(0,1), with replacement. Since the coin
| is unfair, we must attach specific probabilities to the values 0 (tails) and 1 (heads) with a fourth argument, prob = c(0.3, 0.7). Assign the result to a new
| variable called flips.

> sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
  [1] 1 1 0 0 1 0 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 0 0 1 1 1 0 1 0 1 1 1 1 0 1 1 0 1 1 1 1 1 0 1 1 1 0 1 1 0 1 1 1 1 0 1 0 0 1 1 1 1 1 1 0 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 1
 [82] 0 0 1 1 1 1 1 0 0 1 1 1 1 1 0 0 1 0 1

| One more time. You can do it! Or, type info() for more options.

| The following command will produce 100 flips of an unfair coin and assign the result: flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))

> flips<-sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))

| You got it!

  |                                                                                                                                                                     |==============================================================                                                                                               |  39%
| View the contents of the flips variable.

> flips
  [1] 0 1 1 1 1 0 1 1 0 1 1 1 1 1 0 1 1 0 1 0 1 1 1 1 0 1 1 0 0 1 0 1 1 1 1 0 1 0 1 1 1 0 1 1 0 1 1 0 1 1 1 1 1 1 1 0 1 1 0 1 1 1 0 1 0 1 1 1 1 1 0 0 1 1 0 1 1 1 1 0 0
 [82] 1 1 1 1 0 0 0 1 1 0 0 1 1 1 1 1 1 1 0

| That's a job well done!

  |                                                                                                                                                                     |===================================================================                                                                                          |  42%
| Since we set the probability of landing heads on any given flip to be 0.7, we'd expect approximately 70 of our coin flips to have the value 1. Count the actual
| number of 1s contained in flips using the sum() function.

> sum(flips)
[1] 70

| That's a job well done!

  |                                                                                                                                                                     |=======================================================================                                                                                      |  45%
| A coin flip is a binary outcome (0 or 1) and we are performing 100 independent trials (coin flips), so we can use rbinom() to simulate a binomial random variable.
| Pull up the documentation for rbinom() using ?rbinom.

> ?rbinom

| You're the best!

  |                                                                                                                                                                     |============================================================================                                                                                 |  48%
| Each probability distribution in R has an r*** function (for "random"), a d*** function (for "density"), a p*** (for "probability"), and q*** (for "quantile"). We
| are most interested in the r*** functions in this lesson, but I encourage you to explore the others on your own.

...

  |                                                                                                                                                                     |=================================================================================                                                                            |  52%
| A binomial random variable represents the number of 'successes' (heads) in a given number of independent 'trials' (coin flips). Therefore, we can generate a single
| random variable that represents the number of heads in 100 flips of our unfair coin using rbinom(1, size = 100, prob = 0.7). Note that you only specify the
| probability of 'success' (heads) and NOT the probability of 'failure' (tails). Try it now.

> rbinom(1,size=100,prob=0.7)
[1] 67

| That's the answer I was looking for.

  |                                                                                                                                                                     |======================================================================================                                                                       |  55%
| Equivalently, if we want to see all of the 0s and 1s, we can request 100 observations, each of size 1, with success probability of 0.7. Give it a try, assigning the
| result to a new variable called flips2.

> flips2<-rbinom(100,size=1,prob=0.7)

| Keep up the great work!

  |                                                                                                                                                                     |==========================================================================================                                                                   |  58%
| View the contents of flips2.

> flips2
  [1] 0 1 0 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 0 1 0 1 1 0 1 1 0 1 1 0 1 1 1 1 1 0 0 0 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 0 0 0 1 0 1 0 1 0 1 1 1 1 1 1 0 0 0 1 0 0 1 1 1 1
 [82] 1 0 0 0 1 0 1 1 0 0 0 0 1 1 0 1 0 1 1

| Nice work!

  |                                                                                                                                                                     |===============================================================================================                                                              |  61%
| Now use sum() to count the number of 1s (heads) in flips2. It should be close to 70!

> sum(flips2)
[1] 65

| Nice work!

  |                                                                                                                                                                     |====================================================================================================                                                         |  64%
| Similar to rbinom(), we can use R to simulate random numbers from many other probability distributions. Pull up the documentation for rnorm() now.

> ?rnorm

| Excellent job!

  |                                                                                                                                                                     |=========================================================================================================                                                    |  67%
| The standard normal distribution has mean 0 and standard deviation 1. As you can see under the 'Usage' section in the documentation, the default values for the
| 'mean' and 'sd' arguments to rnorm() are 0 and 1, respectively. Thus, rnorm(10) will generate 10 random numbers from a standard normal distribution. Give it a try.

> 
> rnorm(10)
 [1]  1.0315318 -1.3159419  1.0438614 -1.1495107 -0.2340386 -0.2350661 -1.0166313  0.3702944  0.9446238 -0.1817423

| Your dedication is inspiring!

  |                                                                                                                                                                     |=============================================================================================================                                                |  70%
| Now do the same, except with a mean of 100 and a standard deviation of 25.

> rnorm(10,mean=100,sd=25)
 [1]  77.53732 121.35908  99.55295  69.46889 118.72156 110.75757 120.08326  93.71584  88.95575  87.27876

| You got it!

  |                                                                                                                                                                     |==================================================================================================================                                           |  73%
| Finally, what if we want to simulate 100 *groups* of random numbers, each containing 5 values generated from a Poisson distribution with mean 10? Let's start with
| one group of 5 numbers, then I'll show you how to repeat the operation 100 times in a convenient and compact way.

...

  |                                                                                                                                                                     |=======================================================================================================================                                      |  76%
| Generate 5 random values from a Poisson distribution with mean 10. Check out the documentation for rpois() if you need help.

> ?rpois
> rpois(5,10)
[1] 14 10  6  6  7

| You got it!

  |                                                                                                                                                                     |============================================================================================================================                                 |  79%
| Now use replicate(100, rpois(5, 10)) to perform this operation 100 times. Store the result in a new variable called my_pois.

> my_pois<-replicate(100,rpois(5,10))

| You're the best!

  |                                                                                                                                                                     |================================================================================================================================                             |  82%
| Take a look at the contents of my_pois.

> str(my_pois)
 int [1:5, 1:100] 10 11 10 9 7 6 7 11 12 11 ...

| You almost had it, but not quite. Try again. Or, type info() for more options.

| Print the contents of my_pois to the console.

> class(my_pois)
[1] "matrix"

| You're close...I can feel it! Try it again. Or, type info() for more options.

| Print the contents of my_pois to the console.

> my_pois
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] [,27] [,28]
[1,]   10    6    6    9   16   17    8   10   13    12    19    10     7    13     9    11    11     8    16     6    13    21     9    11    20     8    13    18
[2,]   11    7    4   12    8    9   11    5    9    16    12     7     8     4    10    12    12    10     8     5     9     4     6    13    13    11    11    10
[3,]   10   11   11    8   16    6   13   16   11     7    11    11    10     8     8     6    10    11    13     7    10     9     7    11    15     6    13    13
[4,]    9   12   11    7    7    9   11   14   11     8     9     9    10     8    15    10    12     9    12     7     9     9     9    12    10     8     9     9
[5,]    7   11   12   13   12   11    7   10   12     9     4     7    10     8     5     9     7    12    11    16    11    10    13    14    13     8    14    11
     [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] [,51] [,52] [,53] [,54] [,55]
[1,]     8     9     6    11    14     8    11     7     5    12    13    12    13     9    13     7    16    11     6    11    10    11     7     8     7     6     7
[2,]    12     6    10    15     9     8    10     8    10    13    11    11    10     8     8     4     9    11    11    10     6    12     9     5    10    11    14
[3,]    12    10    14    11    10     8     6     9     9     7     8    15     5     9    12     9     8    11     9     9    10     9     9     8    10    10    13
[4,]     7     7     9    10     4    21     5    10     4    11    10    15    10    11     8     9     9    10    17     9    14     8    11    11    14    11     9
[5,]    15     9     9     7     9    14    10     8     5    13     7    11    11    10    19    10     6     7     8    15     6     7     8    17    12    10     7
     [,56] [,57] [,58] [,59] [,60] [,61] [,62] [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74] [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82]
[1,]    13    16     7     7     5     9    10     9    12    12    14    16    10    15     6     7    12     8     5     7     5     9     8     8    10     9     2
[2,]     9     9     9     3    12     6    15    13     9     8     6     6     8    11     8     7     9    15    12    10    16     6    13     6    11    11    12
[3,]     8    11     5    10    10     9     8     7     9     9    10    10     6     9     8    10    13     8    10    15    11     9    15    11     8     9    14
[4,]    15    12     7     9    11     8     9     6     3     7    14    10     8     3     5    10     8    12     3    10    11    10     9     9    12    11    10
[5,]     5    19     9     8    10     5    12     9     9    11    10    11     3     7     7    10     8    13    14     1     9     6    15    13     9    10     3
     [,83] [,84] [,85] [,86] [,87] [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] [,96] [,97] [,98] [,99] [,100]
[1,]     6     7    10     8    14     8    10     9     7     9     8    10    12    11    10     5     8     15
[2,]     8    11    12     8     8    13    12    11    11     7    13     5     9    12    10     8     9     10
[3,]     8    12     9    13     7     9    15    15    10    16     9     8    15     7     8    14    11      9
[4,]     5    13    11    12     7     8    12    10    16    13     2     4    12    12     8     9    12     10
[5,]    16    10    11     7    11    10     8     8     9    10    12     9    15    14    10    13     7     11

| Nice work!

  |                                                                                                                                                                     |=====================================================================================================================================                        |  85%
| replicate() created a matrix, each column of which contains 5 random numbers generated from a Poisson distribution with mean 10. Now we can find the mean of each
| column in my_pois using the colMeans() function. Store the result in a variable called cm.

> cm<-colMeans(my_pois)

| You got it right!

  |                                                                                                                                                                     |==========================================================================================================================================                   |  88%
| And let's take a look at the distribution of our column means by plotting a histogram with hist(cm).

> hist(cm)

| All that practice is paying off!

  |                                                                                                                                                                     |===============================================================================================================================================              |  91%
| Looks like our column means are almost normally distributed, right? That's the Central Limit Theorem at work, but that's a lesson for another day!

...

  |                                                                                                                                                                     |===================================================================================================================================================          |  94%
| All of the standard probability distributions are built into R, including exponential (rexp()), chi-squared (rchisq()), gamma (rgamma()), .... Well, you see the
| pattern.

...

  |                                                                                                                                                                     |========================================================================================================================================================     |  97%
| Simulation is practically a field of its own and we've only skimmed the surface of what's possible. I encourage you to explore these and other functions further on
| your own.

...

  |                                                                                                                                                                     |=============================================================================================================================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: Yes
2: No

Selection: 1
What is your email address? roee.orland@gmail.com
What is your assignment token? 47iorm8HhO0aSHe4
Grade submission succeeded!

| You got it!

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files        3: Sequences of Numbers       4: Vectors                    5: Missing Values          
 6: Subsetting Vectors         7: Matrices and Data Frames   8: Logic                      9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data           13: Simulation                14: Dates and Times           15: Base Graphics           


Selection: 15

  |                                                                                                                                                                     |                                                                                                                                                             |   0%

| One of the greatest strengths of R, relative to other programming languages, is the ease with which we can create publication-quality graphics. In this lesson,
| you'll learn about base graphics in R.

...

  |                                                                                                                                                                     |===                                                                                                                                                          |   2%
| We do not cover the more advanced portions of graphics in R in this lesson. These include lattice, ggplot2 and ggvis.

...

  |                                                                                                                                                                     |=======                                                                                                                                                      |   4%
| There is a school of thought that this approach is backwards, that we should teach ggplot2 first. See http://varianceexplained.org/r/teach_ggplot2_to_beginners/ for
| an outline of this view.

...

  |                                                                                                                                                                     |==========                                                                                                                                                   |   7%
| Load the included data frame cars with data(cars).

> data(cars)

| Excellent work!

  |                                                                                                                                                                     |==============                                                                                                                                               |   9%
| To fix ideas, we will work with simple data frames. Our main goal is to introduce various plotting functions and their arguments. All the output would look more
| interesting with larger, more complex data sets.

...

  |                                                                                                                                                                     |=================                                                                                                                                            |  11%
| Pull up the help page for cars.

> ?cars

| You are really on a roll!

  |                                                                                                                                                                     |====================                                                                                                                                         |  13%
| As you can see in the help page, the cars data set has only two variables: speed and stopping distance. Note that the data is from the 1920s.

...

  |                                                                                                                                                                     |========================                                                                                                                                     |  15%
| Run head() on the cars data.

> head(cars)
  speed dist
1     4    2
2     4   10
3     7    4
4     7   22
5     8   16
6     9   10

| Excellent job!

  |                                                                                                                                                                     |===========================                                                                                                                                  |  17%
| Before plotting, it is always a good idea to get a sense of the data. Key R commands for doing so include, dim(), names(), head(), tail() and summary().

...

  |                                                                                                                                                                     |===============================                                                                                                                              |  20%
| Run the plot() command on the cars data frame.

> plot(cars)

| All that hard work is paying off!

  |                                                                                                                                                                     |==================================                                                                                                                           |  22%
| As always, R tries very hard to give you something sensible given the information that you have provided to it. First, R notes that the data frame you have given it
| has just two columns, so it assumes that you want to plot one column versus the other.

...

  |                                                                                                                                                                     |======================================                                                                                                                       |  24%
| Second, since we do not provide labels for either axis, R uses the names of the columns. Third, it creates axis tick marks at nice round numbers and labels them
| accordingly. Fourth, it uses the other defaults supplied in plot().

...

  |                                                                                                                                                                     |=========================================                                                                                                                    |  26%
| We will now spend some time exploring plot, but many of the topics covered here will apply to most other R graphics functions. Note that 'plot' is short for
| scatterplot.

...

  |                                                                                                                                                                     |============================================                                                                                                                 |  28%
| Look up the help page for plot().

> ?plot

| Excellent job!

  |                                                                                                                                                                     |================================================                                                                                                             |  30%
| The help page for plot() highlights the different arguments that the function can take. The two most important are x and y, the variables that will be plotted. For
| the next set of questions, include the argument names in your answers. That is, do not type plot(cars$speed, cars$dist), although that will work. Instead, use
| plot(x = cars$speed, y = cars$dist).

...

  |                                                                                                                                                                     |===================================================                                                                                                          |  33%
| Use plot() command to show speed on the x-axis and dist on the y-axis from the cars data frame. Use the form of the plot command in which vectors are explicitly
| passed in as arguments for x and y.

> plot(x=cars$speed,y=cars$dist)

| That's correct!

  |                                                                                                                                                                     |=======================================================                                                                                                      |  35%
| Note that this produces a slightly different answer than plot(cars). In this case, R is not sure what you want to use as the labels on the axes, so it just uses the
| arguments which you pass in, data frame name and dollar signs included.

...

  |                                                                                                                                                                     |==========================================================                                                                                                   |  37%
| Note that there are other ways to call the plot command, i.e., using the "formula" interface. For example, we get a similar plot to the above with plot(dist ~
| speed, cars). However, we will wait till later in the lesson before using the formula interface.

...

  |                                                                                                                                                                     |=============================================================                                                                                                |  39%
| Use plot() command to show dist on the x-axis and speed on the y-axis from the cars data frame. This is the opposite of what we did above.

> plot(x=cars$dist,y=cars$speed)

| Your dedication is inspiring!

  |                                                                                                                                                                     |=================================================================                                                                                            |  41%
| It probably makes more sense for speed to go on the x-axis since stopping distance is a function of speed more than the other way around. So, for the rest of the
| questions in this portion of the lesson, always assign the arguments accordingly.

...

  |                                                                                                                                                                     |====================================================================                                                                                         |  43%
| In fact, you can assume that the answers to the next few questions are all of the form plot(x = cars$speed, y = cars$dist, ...) but with various arguments used in
| place of the ...

...

  |                                                                                                                                                                     |========================================================================                                                                                     |  46%
| Recreate the plot with the label of the x-axis set to "Speed".

> plot(cars)

| Not exactly. Give it another go. Or, type info() for more options.

| Type plot(x = cars$speed, y = cars$dist, xlab = "Speed") to create the plot.

> plot(x=cars$speed,y=cars$dist,xlab="Speed")

| You got it!

  |                                                                                                                                                                     |===========================================================================                                                                                  |  48%
| Recreate the plot with the label of the y-axis set to "Stopping Distance".

> plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="stoopping Distance")

| One more time. You can do it! Or, type info() for more options.

| Type plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance") to create the plot.

> plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")

| You're close...I can feel it! Try it again. Or, type info() for more options.

| Type plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance") to create the plot.

> plot(x=cars$speed,y=cars$dist,ylab="Stopping Distance")

| Perseverance, that's the answer.

  |                                                                                                                                                                     |==============================================================================                                                                               |  50%
| Recreate the plot with "Speed" and "Stopping Distance" as axis labels.

> plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")

| Nice work!

  |                                                                                                                                                                     |==================================================================================                                                                           |  52%
| The reason that plots(cars) worked at the beginning of the lesson was that R was smart enough to know that the first element (i.e., the first column) in cars should
| be assigned to the x argument and the second element to the y argument. To save on typing, the next set of answers will all be of the form, plot(cars, ...) with
| various arguments added.

...

  |                                                                                                                                                                     |=====================================================================================                                                                        |  54%
| For each question, we will only want one additional argument at a time. Of course, you can pass in more than one argument when doing a real project.

...

  |                                                                                                                                                                     |=========================================================================================                                                                    |  57%
| Plot cars with a main title of "My Plot". Note that the argument for the main title is "main" not "title".

> plot(cars,main="My Plot")

| Perseverance, that's the answer.

  |                                                                                                                                                                     |============================================================================================                                                                 |  59%
| Plot cars with a sub title of "My Plot Subtitle".

> plot(cars,sub="My Plot Subtitle")

| All that hard work is paying off!

  |                                                                                                                                                                     |================================================================================================                                                             |  61%
| The plot help page (?plot) only covers a small number of the many arguments that can be passed in to plot() and to other graphical functions. To begin to explore
| the many other options, look at ?par. Let's look at some of the more commonly used ones. Continue using plot(cars, ...) as the base answer to these questions.

...

  |                                                                                                                                                                     |===================================================================================================                                                          |  63%
| Plot cars so that the plotted points are colored red. (Use col = 2 to achieve this effect.)

> plot(cars,col=2)

| You got it!

  |                                                                                                                                                                     |======================================================================================================                                                       |  65%
| Plot cars while limiting the x-axis to 10 through 15.  (Use xlim = c(10, 15) to achieve this effect.)

> plot(cars,xlim=c(10,15))

| You're the best!

  |                                                                                                                                                                     |==========================================================================================================                                                   |  67%
| You can also change the shape of the symbols in the plot. The help page for points (?points) provides the details.

...

  |                                                                                                                                                                     |=============================================================================================================                                                |  70%
| Plot cars using triangles.  (Use pch = 2 to achieve this effect.)

> plot(cars,pch=2)

| You got it!

  |                                                                                                                                                                     |=================================================================================================================                                            |  72%
| Arguments like "col" and "pch" may not seem very intuitive. And that is because they aren't! So, many/most people use more modern packages, like ggplot2, for
| creating their graphics in R.

...

  |                                                                                                                                                                     |====================================================================================================================                                         |  74%
| It is, however, useful to have an introduction to base graphics because many of the idioms in lattice and ggplot2 are modeled on them.

...

  |                                                                                                                                                                     |=======================================================================================================================                                      |  76%
| Let's now look at some other functions in base graphics that may be useful, starting with boxplots.

...

  |                                                                                                                                                                     |===========================================================================================================================                                  |  78%
| Load the mtcars data frame.

> data(mtcars)

| You are doing so well!

  |                                                                                                                                                                     |==============================================================================================================================                               |  80%
| Anytime that you load up a new data frame, you should explore it before using it. In the middle of a swirl lesson, just type play(). This temporarily suspends the
| lesson (without losing the work you have already done) and allows you to issue commands like dim(mtcars) and head(mtcars). Once you are done examining the data,
| just type nxt() and the lesson will pick up where it left off.

...

  |                                                                                                                                                                     |==================================================================================================================================                           |  83%
| Look up the help page for boxplot().

> play()

| Entering play mode. Experiment as you please, then type nxt() when you are ready to resume the lesson.

> summary(mtcars)
      mpg             cyl             disp             hp             drat             wt             qsec             vs               am              gear      
 Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0   Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000   Min.   :0.0000   Min.   :3.000  
 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5   1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:3.000  
 Median :19.20   Median :6.000   Median :196.3   Median :123.0   Median :3.695   Median :3.325   Median :17.71   Median :0.0000   Median :0.0000   Median :4.000  
 Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7   Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375   Mean   :0.4062   Mean   :3.688  
 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0   3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:4.000  
 Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0   Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000   Max.   :1.0000   Max.   :5.000  
      carb      
 Min.   :1.000  
 1st Qu.:2.000  
 Median :2.000  
 Mean   :2.812  
 3rd Qu.:4.000  
 Max.   :8.000  
> str(mtcars)
'data.frame':   32 obs. of  11 variables:
 $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...
 $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...
 $ disp: num  160 160 108 258 360 ...
 $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...
 $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...
 $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...
 $ qsec: num  16.5 17 18.6 19.4 17 ...
 $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...
 $ am  : num  1 1 1 0 0 0 0 0 0 0 ...
 $ gear: num  4 4 4 3 3 3 3 4 4 4 ...
 $ carb: num  4 4 1 1 2 1 4 2 2 4 ...
> nxt()

| Resuming lesson...


| Look up the help page for boxplot().

> ?boxplot

| You got it!

  |                                                                                                                                                                     |=====================================================================================================================================                        |  85%
| Instead of adding data columns directly as input arguments, as we did with plot(), it is often handy to pass in the entire data frame. This is what the "data"
| argument in boxplot() allows.

...

  |                                                                                                                                                                     |=========================================================================================================================================                    |  87%
| boxplot(), like many R functions, also takes a "formula" argument, generally an expression with a tilde ("~") which indicates the relationship between the input
| variables. This allows you to enter something like mpg ~ cyl to plot the relationship between cyl (number of cylinders) on the x-axis and mpg (miles per gallon) on
| the y-axis.

...

  |                                                                                                                                                                     |============================================================================================================================================                 |  89%
| Use boxplot() with formula = mpg ~ cyl and data = mtcars to create a box plot.

> boxplot(data=mtcars,mpg~cyl)

| Not quite right, but keep trying. Or, type info() for more options.

| Type boxplot(formula = mpg ~ cyl, data = mtcars) to create the plot.

> boxplot(data=mtcars,formula=mpg~cyl)
Error in boxplot.default(data = mtcars, formula = mpg ~ cyl) : 
  argument "x" is missing, with no default
> boxplot(mpg~cyl,data=mtcars)

| Keep up the great work!

  |                                                                                                                                                                     |===============================================================================================================================================              |  91%
| The plot shows that mpg is much lower for cars with more cylinders. Note that we can use the same set of arguments that we explored with plot() above to add axis
| labels, titles and so on.

...

  |                                                                                                                                                                     |===================================================================================================================================================          |  93%
| When looking at a single variable, histograms are a useful tool. hist() is the associated R function. Like plot(), hist() is best used by just passing in a single
| vector.

...

  |                                                                                                                                                                     |======================================================================================================================================================       |  96%
| Use hist() with the vector mtcars$mpg to create a histogram.

> hist(mtcars$mpg)

| Great job!

  |                                                                                                                                                                     |==========================================================================================================================================================   |  98%
| In this lesson, you learned how to work with base graphics in R. The best place to go from here is to study the ggplot2 package. If you want to explore other
| elements of base graphics, then this web page (http://www.ling.upenn.edu/~joseff/rstudy/week4.html) provides a useful overview.

...

  |                                                                                                                                                                     |=============================================================================================================================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: No
2: Yes

Selection: y
Enter an item from the menu, or 0 to exit
Selection: 2
What is your email address? roee.orland@gmail.com
What is your assignment token? lkFUq7ZxUqS9V9sX
Grade submission succeeded!

| That's a job well done!

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 
